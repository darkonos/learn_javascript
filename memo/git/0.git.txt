GIT-wiki
========
Créée le mardi 27 mars 2018

Description : outil de versionning pour un projet dev ou autres
http://git-scm.com
*Toutes les commandes suivantes peuvent être éxécutée sans 
connection internet.
plusieurs personnes peuvent travailler sur le même fichier sans
pour autant entrer en conflit. 

0.Installation
$ sudo apt-get install git

1. CREER UN USER :
  # git config --global user.name "koss"
  # git config --global user.mail "dev.flo@protonmail.com"
  # git config -l

2.BASIC COMMAND :
- Connaitre la version utilisée :
 $ git --version

- Création d'un nouveau projet
$ mkdir new_project

- Se positionner dans le repertoire
$ cd new_project

- Initialiser git pour versionner mon nouveau projet
$git init 

-Savoir ce qui se passe sur le projet
$ git status 

3. COMMIT (SNAPSHOT) : suite de modification accompagné d'un message.
- Ajout d'un fichier 
$ git add lefichier

- faire git status pour voir les changements
$ git status

- faire un commit (snapshot) pour surveiller les changements
$ git commit -m "Mon message"

- faire git status pour voir les changements
$ git status

- Demander à git de mettre à jour les fichiers déja existant dans son index
$ git commit -a -m "Mon message"

*Nota : à chaque modification du fichier on répète l'étape 3
-Voir la partie du code modifié avant un commit
$ git diff 
$ git diff  dossier spécifique du fichier

- Voir l'historique des modifications (plus récent à l'ancien)
$ git log

- Se positionner sur un commit donné
$ git checkout "N° du SHA du commit"

-Revenir sur le dernier commit
$ git checkout master

-On ne peut pas vraiment "supprimer" un commit mais on peut créer un nouveau commit qui fait l'inverse du précédent
$ git revert "N° du SHA du commit"

-Modifier le message de votre dernier commit que si vous n'avez pas encore pushé votre commit sur l'origine !
$ git commit --amend -m "Mon message"

-Annuler tous les changements que je n'ai pas encore commités
$ git reset --hard

4. RECUPERER DU CODE D'UN AUTRE REPOSITORY

A partir de git-hub, une option propose un lien SSH, HTTPS ou Subversion.
$ git clone "Adresse de lien du projet"

5. CREER UN REPOSITORY

- Se rendre sur git-hub et créer un nouveau repository public (privé c'est payant)
- cocher l'option README pour avoir un premier fichier afin de pouvoir le cloner directement.
- Récupérer le code par le lien HTTPS ou SSH(https://help.github.com/articles/connecting-to-github-with-ssh/)

6 ENVOYER VOTRE CODE SUR GIT-HUB
$ git push origin master


6.BRANCHEMENT
 *Diverger de la branche de départ pour arriver dans une branche dans lequel on travail. Interressant pour tester un code 
expérimental, coder une fonctionnalité jusqu'à tant   quelle soit correct pour être intégrer dans le code principal sans polluer l'environnement de travail de départ.
LA BONNE PRATIQUE C'EST DE TJRS TRAVAILLER DANS UNE BRANCH AUTRE QUE MASTER.
- Création d'une branche 
$ git branch ma_branch
 - voir mes branch
$ git branch
- Se positionner sur une branch précise
$ git checkout ma_branch 
- Ajout du fichier
$git add fichier
- Création d'un commit sur la nouvelle branch
$git commit -m "mon message"
- Faire un diff des 2 branch
$ git diff nom_branch1..nom_branch2

5. MERGE 
- Fusionner deux ou plusieurs historiques de développement ensemble. un editeur s'ouvrira pour entrer un message
-Il faut se placer dans le fichier principal et ensuite fusionner
$ git merge fichier_a_fusionner

ATTENTION: Si  2 dev modifie une ligne de code en même temps
et que git se sait pas quoi faire. les codeurs se contactent pour prendre la decision.
-Supprimer une branch (après avoir merger la branch)
$ git branch -d ma_branch
-Supprimer une branch (sans vouloir merger la branch)
git branch -D ma_branch 

- VISUALIZATION
Outils graphique permettant de visualiser les commit créé
http://onlywei.github.io/explain-git-with-d3/

 



  



  

